import React, { Component } from 'react'
import GoogleApiComponent from './GoogleApiComponent';
import Map from './Map';
import Marker from './Marker';
import InfoWindow from './InfoWindow';
import { locations } from '../data/locations';
import { auth } from '../data/auth';
import Menu from './Menu';

export class MapContainer extends Component {
    state = {
        showingInfoWindow: false,
        markerList: [],
        activeMarker: {},
        venueInfo: {},
        map: {}
    }

    onMapClick = (e) => {
        /* 
         *  Triggers when the map is clicked
         *  & the target is not an infowindow
         *  or any of it's children
        */
        let iw = document.querySelector('[style*="cursor: default"]')

        if (this.state.showingInfoWindow && 
            !iw.contains(e.target) &&
            e.target.shape !== 'poly') {
            this.setState({
                showingInfoWindow: false,
                activeMarker: null
            });
        }
    }

    onMarkerClick = (props, marker, e) => {
        this.setState({
            activeMarker: marker,
            showingInfoWindow: true
        })

        this.fetchVenueInfo(props.id);
    }

    // Grabs markers from <Marker />, gives them the map object
    // and stores them into state
    markerListPopulate = (marker) => {
        if (!this.state.markerList.length) {
            this.setState((prevState) => {
                const newMarkerList = prevState.markerList
                marker.map = this.props.map;
                marker.anchorPoint = {x: -0.5, y: -43, b: true};
                newMarkerList.push(marker);
                return { markerList: newMarkerList}
            })
        }
    }

    locationMarkerFuse = () => {
        // Combines hardcoded locations array
        // with marker objects generated by maps
        locations.map(location => {
            const markerMatch = this.state.markerList.filter(marker => {
                return marker.id === location.venueId
            })
            location.marker = markerMatch[0];
            if (location.marker !== undefined) {
                location.marker.internalPosition = {
                    lat: function() {
                        return location.location.lat
                    },
                    lng: function() {
                        return location.location.lng
                    },
                }
            }
        })
        return locations;
    }

    fetchVenueInfo = (venueId) => {
        // // Foursquare api fetch
        fetch(`https://api.foursquare.com/v2/venues/${venueId}` +
            `?client_id=${auth.FS_CLIENT_ID}` +
            `&client_secret=${auth.FS_CLIENT_SECRET}` +
            `&v=20181014`).then(res => res.json()).then(venue => {
                // generate html for infowindow
                this.generateInfoWindowContents(venue.response.venue);

                // setState to trigger re-render
                this.setState({ venueInfo: venue.response.venue })
        }).then(() => {
            // Remove white border and shadow from default infowindows
            // Removal is done via InfoWindow.css
            let iw = document.querySelector('.gm-style-iw');
            iw.classList.add('infowindow');

            iw.parentElement
                .querySelector('div')
                .className='infowindow-parent';
        })
    }

    generateInfoWindowContents = (venue) => {

        const { 
            name,
            attributes,
            bestPhoto,
            location,
            rating,
            canonicalUrl,
            contact,
            description,
          } = venue;

        const priceTier = attributes.groups[0].summary;

        this.iwContents = (
            <div className='infowindow-inside-container'>
                <div className='infowindow-icon'>
                    <img src={`https://igx.4sqi.net/img/general/40x40${bestPhoto.suffix}`} alt='' />
                    <div>{priceTier}</div>
                </div>
                <div className='infowindow-details'>
                    <div className='infowindow-name'>
                        <a href={canonicalUrl} target={'_blank'}>{name}</a>
                        <div>{rating}</div>
                    </div>
                    <div className='infowindow-address-data'>
                        <div className='infowindow-address'>
                            {location.address}
                        </div>
                        <div>
                            {contact.phone}
                        </div>
                        <p>
                            {description}
                        </p>
                    </div>
                </div>
            </div>
        );
    }
    
    render() {
        return (
            <Menu
            onVenueClick={this.onMarkerClick}
            locations={this.locationMarkerFuse()}
            >
                <Map 
                    onMapClick={this.onMapClick.bind(this)} 
                    google={this.props.google}
                    >
                    {
                        locations.map(venue => {
                            return (
                                <Marker 
                                key={venue.venueId}
                                id={venue.venueId}
                                position={{lat: venue.location.lat, lng: venue.location.lng}}
                                onClick={this.onMarkerClick}
                                markerListPopulate={this.markerListPopulate}
                                />
                            )
                        })
                    }

                    <InfoWindow
                        marker={this.state.activeMarker}
                        visible={this.state.showingInfoWindow}>
                        {this.state.showingInfoWindow &&
                            this.iwContents}
                    </InfoWindow>
                </Map>
            </Menu>
        )
    }
}
  
export default GoogleApiComponent({
    apiKey: auth.GOOGLE_MAPS_API_KEY
})(MapContainer)